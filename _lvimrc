set nocompatible

filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle"
Bundle 'gmarik/vundle'

" github repo
Bundle 'scrooloose/nerdcommenter'
" support for snippet
Bundle 'Shougo/neocomplcache.vim'
Bundle 'Shougo/neosnippet.vim'
Bundle 'honza/vim-snippets'
Bundle 'tomtom/checksyntax_vim'
Bundle 'bling/vim-airline'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'altercation/vim-colors-solarized'

" github vim-scripts repo
Bundle 'mru.vim'
Bundle 'SearchComplete'
Bundle 'surround.vim'
Bundle 'phpfolding.vim'
Bundle 'PDV--phpDocumentor-for-Vim'

filetype plugin indent on

if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

syntax enable
colorscheme desert
"set background=dark
"colorscheme solarized
let mapleader=";"
let g:mapleader=";"

if has("gui_running")
    set guioptions-=m " hide menu
    set guioptions-=T " hide toolbar
    set guioptions+=e
    set t_Co=256
    set guitablabel=%M\ %t
    if has("win32")
        set guifont=Consolas:h10
        set langmenu=zh_CN.UTF-8
        language message zh_CN.UTF-8
    endif
endif

syntax on
" support for 256 colors
set t_Co=256
set nu
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5
set encoding=utf-8
set fileencodings=utf-8,chinese,latin-1
set expandtab
set tabstop=4 shiftwidth=4 softtabstop=4
set autoindent
set smarttab
set ai " Auto indent
set si " Smart indent
set wrap " Wrap lines
set showmatch
set hlsearch
set nowb
set noswapfile
set history=400
set lbr
set lz
set backspace=eol,start,indent
set magic
set incsearch
set mat=4
set nobackup
set nobomb
set autoread
set ff=unix
set so=5
set wildmenu
set wildignore=*.o,*~,*.pyc
set ruler
set cmdheight=2
set hid
set whichwrap+=<,>,h,l
set ignorecase
set lazyredraw

set noerrorbells
set novisualbell
set t_vb=
set tm=500

set lbr
set tw=500

map j gj
map k gk

nmap <leader>wj <C-W>j
nmap <leader>wk <C-W>k
nmap <leader>wh <C-W>h
nmap <leader>wl <C-W>l

nmap <leader>tp :tabprevious<cr>
nmap <leader>tn :tabnext<cr>
nmap <leader>tl :tablast<cr>
nmap <leader>tf :tabfirst<cr>
nmap <leader>tc :tabclose<cr>
nmap <leader>tm :tabmove<cr>
nmap <leader>to :tabonly<cr>
nmap <leader>te :tabedit<space>
nmap <leader>tt :call SwitchLastUsedTab()<cr>

nmap <leader>doc :call PhpDoc()<cr>

autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif
set viminfo^=%

set laststatus=2

set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l

nmap <C-j> mz:m+<cr>`z
nmap <C-k> mz:m-2<cr>`z
vmap <C-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <C-k> :m'<-2<cr>`>my`<mzgv`yo`z
inoremap <C-h> <Left>
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-l> <Right>

imap <silent><M-h> <Left>
imap <silent><M-j> <Down>
imap <silent><M-k> <Up>
imap <silent><M-l> <Right>
if has("mac") || has("macunix")
  imap <D-h> <M-h>
  imap <D-j> <M-j>
  imap <D-k> <M-k>
  imap <D-l> <M-l>
endif

func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()
autocmd BufWrite *.coffee :call DeleteTrailingWS()

vnoremap <silent> gv :call VisualSelection('gv')<CR>

map <leader>g :vimgrep // **/*<left><left><left><left><left><left>

vnoremap <silent> <leader>r :call VisualSelection('replace')<CR>

map <leader>n :cn<cr>
map <leader>p :cp<cr>

cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm
set wildmode=longest,list

map <leader>pp :setlocal paste!<cr>


function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction

function! VisualSelection(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*')
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    en
    return ''
endfunction

command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr("%") == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction

autocmd TabLeave * let g:LastUsedTabPage = tabpagenr()
function! SwitchLastUsedTab()
    if exists("g:LastUsedTabPage")
        execute "tabnext " g:LastUsedTabPage
    endif
endfunction

" Enable snipMate compatibility feature.
let g:neosnippet#enable_snipmate_compatibility = 1

" " Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'

" Plugin key-mappings.
"imap <C-k>     <Plug>(neosnippet_expand_or_jump)
"smap <C-k>     <Plug>(neosnippet_expand_or_jump)
"xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

" airline
let g:airline_theme='simple'
