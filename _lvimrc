set nocompatible

colorscheme desert
let mapleader=";"
let g:mapleader=";"

" Set extra options when running in GUI mode
if has("gui_running")
    set guioptions-=m " hide menu
    set guioptions-=T " hide toolbar
    set guioptions+=e
    set t_Co=256
    set guitablabel=%M\ %t
    " 注册表中设置此字体为consola和微软雅黑的组合
    if has("win32")
        set guifont=Consolas:h10
    endif
endif

" golang
set rtp+=$GOROOT/misc/vim

filetype plugin on
syntax enable
syntax on
set nu
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5
set encoding=utf-8
set fileencodings=utf-8,chinese,latin-1
set expandtab
set tabstop=4 shiftwidth=4 softtabstop=4
set autoindent
set smarttab
set ai " Auto indent
set si " Smart indent
set wrap " Wrap lines
" 匹配括号
set showmatch
set hlsearch
set nowb
set noswapfile
set history=400
set lbr
set lz
set backspace=eol,start,indent
" For regular expressions turn magic on
set magic
" 输入的同时，即开始搜索
set incsearch
" 光标闪动频率
set mat=4
set nobackup
set nobomb
set autoread
set ff=unix
" j/k距离上下边界的行数
set so=5
" 查看文件列表
set wildmenu
" 过滤文件类型
set wildignore=*.o,*~,*.pyc
" 显示当前光标位置
set ruler
" Height of the command bar
set cmdheight=2
" A buffer becomes hidden when it is abandoned
set hid
" 设置左右方向键和h/l键可以从本行行首/尾自动移动到上/下行的尾/首
set whichwrap+=<,>,h,l
" Ignore case when searching
set ignorecase
" When searching try to be smart about cases
" set smartcase
" 执行宏时不要redraw
set lazyredraw

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

set lbr
set tw=500

" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" Smart way to move between windows
nmap <leader>wj <C-W>j
nmap <leader>wk <C-W>k
nmap <leader>wh <C-W>h
nmap <leader>wl <C-W>l

" tab mapping
nmap <leader>tp :tabprevious<cr>
nmap <leader>tn :tabnext<cr>
nmap <leader>tl :tablast<cr>
nmap <leader>tf :tabfirst<cr>
nmap <leader>tc :tabclose<cr>
nmap <leader>tm :tabmove<cr>
nmap <leader>to :tabonly<cr>
nmap <leader>te :tabedit<space>
nmap <leader>tt :call SwitchLastUsedTab()<cr>

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif
" Remember info about open buffers on close
set viminfo^=%

" Always show the status line
set laststatus=2

" Format the status line
set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l

" Move a line of text using CTRL+[jk]
nmap <C-j> mz:m+<cr>`z
nmap <C-k> mz:m-2<cr>`z
vmap <C-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <C-k> :m'<-2<cr>`>my`<mzgv`yo`z

" Move cursor under insert mode using ALT+[jk] or Command+[jk] on mac
imap <silent><M-h> <Left>
imap <silent><M-j> <Down>
imap <silent><M-k> <Up>
imap <silent><M-l> <Right>
if has("mac") || has("macunix")
  imap <D-h> <M-h>
  imap <D-j> <M-j>
  imap <D-k> <M-k>
  imap <D-l> <M-l>
endif

" Delete trailing white space on save, useful for Python and CoffeeScript ;)
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()
autocmd BufWrite *.coffee :call DeleteTrailingWS()

" vimgrep the selected text
vnoremap <silent> gv :call VisualSelection('gv')<CR>

" Open vimgrep and put the cursor in the right position
map <leader>g :vimgrep // **/*<left><left><left><left><left><left>

" When you press <leader>r you can search and replace the selected text
vnoremap <silent> <leader>r :call VisualSelection('replace')<CR>

" vimgrep pre/next result
map <leader>n :cn<cr>
map <leader>p :cp<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Misc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction

function! VisualSelection(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*')
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    en
    return ''
endfunction

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr("%") == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction

" Fast tab switching
autocmd TabLeave * let g:LastUsedTabPage = tabpagenr()
function! SwitchLastUsedTab()
    if exists("g:LastUsedTabPage")
        execute "tabnext " g:LastUsedTabPage
    endif
endfunction
